import 'dart:io';
import 'dart:isolate';

import 'package:path/path.dart' as path;
import 'package:yaml/yaml.dart';

Future<void> main(List<String> args) async {
  if (args.contains('-h')) {
    print('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 3 —Ç–µ–≥–∞: create_templates <template_name> <target_path> <replace_name>, '
        '–≥–¥–µ\n'
        'template_name - –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞,\n'
        'target_path - –ø—É—Ç—å –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω,\n'
        'replace_name - –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.\n'
        '\n'
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏:\n'
        '-l –∏–ª–∏ --list ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤\n'
        '-h ‚Äî —Å–ø—Ä–∞–≤–∫–∞');

    exit(0);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É —á–µ—Ä–µ–∑ package URI
  final resolvedUri = await Isolate.resolvePackageUri(Uri.parse('package:create_templates/create_templates.dart'));
  if (resolvedUri == null) {
    print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –¥–æ –ø–∞–∫–µ—Ç–∞ create_templates.');
    exit(1);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ —Å–∫—Ä–∏–ø—Ç—É
  final scriptPath = resolvedUri.toFilePath();
  final projectPath = path.normalize(path.join(scriptPath, '..', '..'));

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∞
  final projectDir = Directory(projectPath);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —à–∞–±–ª–æ–Ω–æ–≤
  final templatesPath = path.join(projectDir.path, '.templates');

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
  if (args.contains('-l') || args.contains('--list')) {
    final templatesDir = Directory(templatesPath);

    if (!templatesDir.existsSync()) {
      print('‚ùå –ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $templatesPath');
      exit(1);
    }

    final templates = templatesDir.listSync().whereType<Directory>().toList();

    if (templates.isEmpty) {
      print('‚ÑπÔ∏è –®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $templatesPath');
    } else {
      print('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:');
      for (var template in templates) {
        final templatesPath = path.basename(template.path);

        final metaFile = File(path.join(template.path, 'meta.yaml'));

        final content = metaFile.readAsStringSync();
        final meta = loadYaml(content);

        final description = meta['description']?.toString() ?? '';

        print('‚Ä¢ $templatesPath - $description');
      }
    }

    exit(0);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  if (args.length < 3) {
    print('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: create_templates <template_name> <target_path> <replace_name>');
    print('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -h –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏');
    exit(1);
  }

  final templateName = args[0];
  final targetPath = args[1];
  final replaceName = args[2];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ [templateName]
  final templatePath = path.join(templatesPath, templateName);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–∞–ø–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
  final templateDir = Directory(templatePath);

  // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  var targetDir = Directory(path.absolute(path.join(targetPath, replaceName)));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
  if (!templateDir.existsSync()) {
    print('‚ùå –®–∞–±–ª–æ–Ω "$templateName" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ "$templatesPath"');
    exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ a–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  if (!Directory(path.absolute(targetPath)).existsSync()) {
    print('‚ùå –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è "$targetPath" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
  if (!targetDir.existsSync()) {
    targetDir = await createDirectory(targetDir);
  }

  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
  await copyDirectory(templateDir, targetDir);

  print('‚úÖ –®–∞–±–ª–æ–Ω "$templateName" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ "${targetDir.path}"');

  // –ó–∞–º–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤: "Feature" ‚Üí —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "Auth"
  await replaceFeatureInFileContent(targetDir, replaceName);

  print('‚úÖ –ó–∞–º–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ —Ñ–∞–π–ª–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  // –ó–∞–º–µ–Ω–∞ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫: "feature" (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) ‚Üí replaceName (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞)
  await renameFeatureInNames(targetDir, replaceName);

  print('‚úÖ –ó–∞–º–µ–Ω–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

Future<Directory> createDirectory(Directory targetDir) async {
  return await targetDir.create(recursive: true);
}

/// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ [source] –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é [destination].
Future<void> copyDirectory(Directory source, Directory destination) async {
  await for (var entity in source.list(recursive: false)) {
    final entityName = path.basename(entity.path);

    // ‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å meta.yaml
    if (entityName == 'meta.yaml') continue;

    final newPath = path.join(destination.path, path.basename(entity.path));

    if (entity is Directory) {
      var newDir = Directory(newPath);
      await newDir.create();
      await copyDirectory(entity, newDir);
    } else if (entity is File) {
      await entity.copy(newPath);
    }
  }
}

/// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Ñ–∞–π–ª–∞–º –≤ [dir] –∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è "Feature"
/// –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ [replaceName] —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π.
Future<void> replaceFeatureInFileContent(Directory dir, String replaceName) async {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º replaceName, —á—Ç–æ–±—ã –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –±—ã–ª–∞ –∑–∞–≥–ª–∞–≤–Ω–æ–π
  final capitalizedReplaceName = replaceName[0].toUpperCase() + replaceName.substring(1);
  await for (var entity in dir.list(recursive: true)) {
    if (entity is File) {
      String content = await entity.readAsString();
      content = content.replaceAll('Feature', capitalizedReplaceName);
      await entity.writeAsString(content);
    }
  }
}

/// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, –≤ –∏–º–µ–Ω–∞—Ö –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è "feature"
/// –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ [replaceName] (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞).
Future<void> renameFeatureInNames(Directory dir, String replaceName) async {
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  final entries = dir.listSync();

  for (var entity in entries) {
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if (entity is Directory) {
      await renameFeatureInNames(entity, replaceName);

      final baseName = path.basename(entity.path);
      if (baseName.contains('feature')) {
        final newName = baseName.replaceAll('feature', replaceName);
        final newPath = path.join(path.dirname(entity.path), newName);
        await entity.rename(newPath);
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    else if (entity is File) {
      final baseName = path.basename(entity.path);
      if (baseName.contains('feature')) {
        final newName = baseName.replaceAll('feature', replaceName);
        final newPath = path.join(path.dirname(entity.path), newName);
        await entity.rename(newPath);
      }
    }
  }
}
